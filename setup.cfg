[metadata]
name = agent-mesh-federated-runtime
version = attr: agent_mesh.__version__
description = Decentralized peer-to-peer runtime for federated learning and multi-agent systems
long_description = file: README.md
long_description_content_type = text/markdown
author = Daniel Schmidt
author_email = daniel@terragon.ai
license = MIT
license_files = LICENSE
url = https://github.com/your-org/agent-mesh-federated-runtime
project_urls =
    Documentation = https://docs.agent-mesh.org
    Source = https://github.com/your-org/agent-mesh-federated-runtime
    Tracker = https://github.com/your-org/agent-mesh-federated-runtime/issues
    Funding = https://github.com/sponsors/your-org
classifiers =
    Development Status :: 4 - Beta
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Topic :: System :: Distributed Computing
    Topic :: Security :: Cryptography
    Topic :: Internet :: WWW/HTTP :: Dynamic Content
    Typing :: Typed
keywords =
    federated-learning
    p2p
    multi-agent
    decentralized
    byzantine-fault-tolerance
    libp2p
    consensus
    mesh-network
    machine-learning
    distributed-systems

[options]
packages = find:
package_dir =
    = src
python_requires = >=3.9
include_package_data = True
zip_safe = False
install_requires =
    asyncio
    aiohttp>=3.8.0
    fastapi>=0.104.0
    uvicorn[standard]>=0.24.0
    pydantic>=2.0.0
    sqlalchemy>=2.0.0
    alembic>=1.12.0
    redis>=5.0.0
    prometheus-client>=0.18.0
    cryptography>=41.0.0
    libp2p>=0.5.0
    grpcio>=1.59.0
    grpcio-tools>=1.59.0
    protobuf>=4.24.0
    pynacl>=1.5.0
    typer>=0.9.0
    rich>=13.6.0
    pyyaml>=6.0.1
    websockets>=12.0
    httpx>=0.25.0
    structlog>=23.2.0
    opentelemetry-api>=1.21.0
    opentelemetry-sdk>=1.21.0
    opentelemetry-instrumentation-fastapi>=0.42b0
    click>=8.1.0
    toml>=0.10.2
    jsonschema>=4.19.0
    numpy>=1.24.0
    scipy>=1.11.0
    scikit-learn>=1.3.0
    torch>=2.0.0
    tensorboard>=2.14.0

[options.packages.find]
where = src

[options.extras_require]
dev =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
    pytest-benchmark>=4.0.0
    pytest-xdist>=3.3.0
    black>=23.9.0
    isort>=5.12.0
    flake8>=6.1.0
    flake8-docstrings>=1.7.0
    flake8-bugbear>=23.9.0
    flake8-comprehensions>=3.14.0
    flake8-simplify>=0.21.0
    mypy>=1.6.0
    bandit[toml]>=1.7.5
    safety>=2.3.0
    pre-commit>=3.4.0
    sphinx>=7.2.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
    coverage[toml]>=7.3.0
    tox>=4.11.0
    ipython>=8.16.0
    jupyter>=1.0.0
    jupyterlab>=4.0.0
    notebook>=7.0.0
testing =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
    pytest-benchmark>=4.0.0
    pytest-xdist>=3.3.0
    factory-boy>=3.3.0
    faker>=19.6.0
    responses>=0.23.0
    httpx>=0.25.0
    docker>=6.1.0
docs =
    sphinx>=7.2.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
    sphinx-autodoc-typehints>=1.24.0
    sphinx-copybutton>=0.5.2
    sphinxcontrib-mermaid>=0.9.2
    furo>=2023.9.10
monitoring =
    prometheus-client>=0.18.0
    grafana-api>=1.0.3
    jaeger-client>=4.8.0
    opentelemetry-exporter-jaeger>=1.21.0
    psutil>=5.9.0
security =
    cryptography>=41.0.0
    pynacl>=1.5.0
    keyring>=24.2.0
    python-jose[cryptography]>=3.3.0
    passlib[bcrypt]>=1.7.4
all =
    %(dev)s
    %(testing)s
    %(docs)s
    %(monitoring)s
    %(security)s

[options.entry_points]
console_scripts =
    agent-mesh = agent_mesh.cli:main
    mesh-node = agent_mesh.node:main
    mesh-dashboard = agent_mesh.dashboard:main
    mesh-benchmark = agent_mesh.benchmark:main

# Testing configuration
[tool:pytest]
minversion = 7.0
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=html
    --cov-report=xml
    --cov-report=term-missing
    --cov-fail-under=90
    --durations=10
    --benchmark-skip
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    slow: Slow running tests
    network: Tests requiring network access
    docker: Tests requiring Docker
    gpu: Tests requiring GPU
    byzantine: Byzantine fault tolerance tests
    consensus: Consensus algorithm tests
    federated: Federated learning tests
    security: Security-related tests
    stress: Stress tests
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = src
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */proto/*_pb2.py
    */proto/*_pb2_grpc.py
    */venv/*
    */site-packages/*
    setup.py
branch = True
concurrency = multiprocessing

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
ignore_errors = True
show_missing = True
skip_covered = False
show_contexts = True

[coverage:html]
directory = htmlcov
show_contexts = True

[coverage:xml]
output = coverage.xml

# Flake8 configuration
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
max-complexity = 12
select = B,C,E,F,W,T4,B9
exclude = 
    .git,
    __pycache__,
    .pytest_cache,
    .coverage,
    htmlcov,
    dist,
    build,
    *.egg-info,
    .tox,
    .venv,
    venv,
    proto/*_pb2.py,
    proto/*_pb2_grpc.py
per-file-ignores =
    __init__.py:F401
    test_*.py:S101,S106,S311
    tests/*:S101,S106,S311
    conftest.py:S101
docstring-convention = google
import-order-style = google
application-import-names = agent_mesh

# MyPy configuration
[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_optional = True
no_implicit_optional = True
show_error_codes = True
show_column_numbers = True
color_output = True
error_summary = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
disallow_untyped_decorators = True
check_untyped_defs = True
disallow_any_generics = True
disallow_subclassing_any = True
ignore_missing_imports = True
follow_imports = silent
namespace_packages = True
explicit_package_bases = True

[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False

[mypy-proto.*]
ignore_errors = True

# Bandit configuration
[bandit]
exclude_dirs = tests,proto
skips = B101,B601

# isort configuration
[isort]
profile = black
line_length = 88
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
src_paths = src,tests
known_first_party = agent_mesh
known_third_party = 
    aiohttp,
    fastapi,
    pydantic,
    sqlalchemy,
    redis,
    prometheus_client,
    cryptography,
    grpcio,
    protobuf,
    typer,
    rich,
    structlog,
    pytest,
    numpy,
    torch
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
default_section = THIRDPARTY
force_sort_within_sections = True
show_diff = True
verbose = True

# Black configuration is in pyproject.toml

# Tox configuration  
[tox:tox]
envlist = py39,py310,py311,py312,lint,type,security,docs
isolated_build = True

[testenv]
deps = 
    pytest
    pytest-asyncio
    pytest-cov
    pytest-mock
    pytest-benchmark
commands = pytest {posargs}

[testenv:lint]
deps = 
    flake8
    flake8-docstrings
    flake8-bugbear
    flake8-comprehensions
    flake8-simplify
commands = flake8 src tests

[testenv:type]
deps = 
    mypy
    types-PyYAML
    types-requests
    types-redis
commands = mypy src

[testenv:security]
deps = 
    bandit[toml]
    safety
commands = 
    bandit -r src
    safety check

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    myst-parser
commands = sphinx-build -b html docs docs/_build/html

[testenv:clean]
deps = coverage
commands = coverage erase

[aliases]
test = pytest