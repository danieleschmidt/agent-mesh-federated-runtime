# Dependency Update Automation Workflow
# Automatically updates dependencies, runs tests, and creates PRs
# 
# MANUAL SETUP REQUIRED:
# 1. Copy this file to .github/workflows/dependency-update.yml
# 2. Configure Dependabot or Renovate bot settings
# 3. Set up auto-merge policies if desired
# 4. Configure security scanning for dependency updates

name: Dependency Updates

on:
  schedule:
    # Run every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch
      auto_merge:
        description: 'Auto-merge if all checks pass'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# Prevent multiple dependency update workflows from running
concurrency:
  group: dependency-updates
  cancel-in-progress: true

jobs:
  # =============================================================================
  # ANALYZE CURRENT DEPENDENCIES
  # =============================================================================
  analyze-dependencies:
    name: Analyze Current Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      python-outdated: ${{ steps.python-check.outputs.outdated }}
      node-outdated: ${{ steps.node-check.outputs.outdated }}
      security-updates: ${{ steps.security-check.outputs.updates }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install pip-tools
      run: pip install pip-tools
    
    - name: Check Python dependencies
      id: python-check
      run: |
        pip-compile --dry-run --upgrade pyproject.toml 2>&1 | tee pip-outdated.txt
        if grep -q "Would update" pip-outdated.txt; then
          echo "outdated=true" >> $GITHUB_OUTPUT
        else
          echo "outdated=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check Node.js dependencies
      id: node-check
      run: |
        if [ -f "package.json" ]; then
          npm outdated --json > npm-outdated.json || true
          if [ -s npm-outdated.json ] && [ "$(cat npm-outdated.json)" != "{}" ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "outdated=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for security updates
      id: security-check
      run: |
        # Python security check
        pip install safety
        safety check --json > python-security.json || true
        
        # Node.js security check
        if [ -f "package.json" ]; then
          npm audit --json > node-security.json || true
        fi
        
        # Check if any security issues found
        security_issues=false
        if [ -s python-security.json ] && [ "$(cat python-security.json)" != "[]" ]; then
          security_issues=true
        fi
        if [ -f "node-security.json" ] && [ -s node-security.json ]; then
          if jq -e '.vulnerabilities | length > 0' node-security.json > /dev/null; then
            security_issues=true
          fi
        fi
        
        echo "updates=$security_issues" >> $GITHUB_OUTPUT
    
    - name: Upload dependency analysis
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: |
          pip-outdated.txt
          npm-outdated.json
          python-security.json
          node-security.json

  # =============================================================================
  # UPDATE PYTHON DEPENDENCIES
  # =============================================================================
  update-python-deps:
    name: Update Python Dependencies
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.python-outdated == 'true' || needs.analyze-dependencies.outputs.security-updates == 'true'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install pip-tools
      run: pip install pip-tools
    
    - name: Update Python dependencies
      run: |
        # Update development dependencies
        pip-compile --upgrade pyproject.toml
        
        # Update production dependencies if separate
        if [ -f "requirements.in" ]; then
          pip-compile --upgrade requirements.in
        fi
    
    - name: Install updated dependencies
      run: |
        pip install -e ".[dev]"
    
    - name: Run quick tests
      run: |
        # Run a subset of fast tests to ensure basic functionality
        pytest tests/unit/ -x --tb=short -q --disable-warnings
    
    - name: Run security check on updated dependencies
      run: |
        safety check
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update Python dependencies
          
          - Update all Python dependencies to latest compatible versions
          - Security vulnerabilities addressed
          - All unit tests passing
          
          Auto-generated by dependency update workflow
        title: '🔄 Update Python Dependencies'
        body: |
          ## Python Dependency Updates
          
          This PR updates Python dependencies to their latest compatible versions.
          
          ### Changes
          - Updated `requirements.txt` and/or `pyproject.toml`
          - All security vulnerabilities have been addressed
          - Unit tests are passing
          
          ### Testing
          - [x] Unit tests pass
          - [x] Security scan clean
          - [ ] Integration tests (will run on PR)
          - [ ] Manual testing if needed
          
          ### Auto-merge
          This PR will auto-merge if:
          - All CI checks pass
          - No breaking changes detected
          - Security scan passes
          
          ---
          
          🤖 This PR was created automatically by the dependency update workflow.
        branch: automated/update-python-dependencies
        delete-branch: true
        labels: |
          dependencies
          python
          automated
          ${{ needs.analyze-dependencies.outputs.security-updates == 'true' && 'security' || '' }}

  # =============================================================================
  # UPDATE NODE.JS DEPENDENCIES
  # =============================================================================
  update-node-deps:
    name: Update Node.js Dependencies
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.node-outdated == 'true'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Update Node.js dependencies
      run: |
        # Update package.json dependencies
        npx npm-check-updates -u
        
        # Update dashboard dependencies if exists
        if [ -d "src/web/dashboard" ]; then
          cd src/web/dashboard
          npx npm-check-updates -u
          cd ../../..
        fi
    
    - name: Install updated dependencies
      run: |
        npm install
        
        if [ -d "src/web/dashboard" ]; then
          cd src/web/dashboard
          npm install
          cd ../../..
        fi
    
    - name: Run Node.js tests and linting
      run: |
        npm run lint || true
        npm test || true
        
        if [ -d "src/web/dashboard" ]; then
          cd src/web/dashboard
          npm run lint || true
          npm test || true
          cd ../../..
        fi
    
    - name: Check for security vulnerabilities
      run: |
        npm audit --audit-level high
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update Node.js dependencies
          
          - Update all Node.js dependencies to latest compatible versions
          - Security vulnerabilities addressed
          - Linting and tests updated
          
          Auto-generated by dependency update workflow
        title: '🔄 Update Node.js Dependencies'
        body: |
          ## Node.js Dependency Updates
          
          This PR updates Node.js dependencies to their latest compatible versions.
          
          ### Changes
          - Updated `package.json` and `package-lock.json`
          - Updated dashboard dependencies if applicable
          - All security vulnerabilities have been addressed
          
          ### Testing
          - [x] ESLint passes
          - [x] Security audit clean
          - [ ] Integration tests (will run on PR)
          - [ ] Manual testing if needed
          
          ### Auto-merge
          This PR will auto-merge if:
          - All CI checks pass
          - No breaking changes detected
          - Security scan passes
          
          ---
          
          🤖 This PR was created automatically by the dependency update workflow.
        branch: automated/update-node-dependencies
        delete-branch: true
        labels: |
          dependencies
          nodejs
          automated

  # =============================================================================
  # SECURITY-ONLY UPDATES
  # =============================================================================
  security-updates:
    name: Critical Security Updates
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.security-updates == 'true'
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Apply security updates for Python
      run: |
        pip install safety
        
        # Get list of vulnerable packages
        safety check --json > security-report.json || true
        
        if [ -s security-report.json ] && [ "$(cat security-report.json)" != "[]" ]; then
          echo "Security vulnerabilities found, updating affected packages..."
          
          # Extract package names and update them specifically
          python << 'EOF'
          import json
          with open('security-report.json') as f:
              data = json.load(f)
          
          packages = set()
          for vuln in data:
              packages.add(vuln['package_name'])
          
          if packages:
              print(f"Updating packages: {', '.join(packages)}")
              import subprocess
              for pkg in packages:
                  subprocess.run(['pip', 'install', '--upgrade', pkg])
          EOF
        fi
    
    - name: Apply security updates for Node.js
      run: |
        if [ -f "package.json" ]; then
          # Fix security issues automatically
          npm audit fix --audit-level high
          
          # Update dashboard if exists
          if [ -d "src/web/dashboard" ]; then
            cd src/web/dashboard
            npm audit fix --audit-level high
            cd ../../..
          fi
        fi
    
    - name: Run comprehensive security tests
      run: |
        # Re-run security checks to ensure fixes worked
        safety check
        if [ -f "package.json" ]; then
          npm audit --audit-level high
        fi
        
        # Run a quick smoke test
        python -c "import src.agent_mesh; print('Import successful')"
    
    - name: Create Security Update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          security: critical dependency security updates
          
          - Address critical security vulnerabilities in dependencies
          - Updated vulnerable packages to secure versions
          - All security scans now pass
          
          Auto-generated by security update workflow
        title: '🚨 Critical Security Updates'
        body: |
          ## Critical Security Updates
          
          This PR addresses critical security vulnerabilities in project dependencies.
          
          ### Security Issues Addressed
          - Critical and high severity vulnerabilities patched
          - Dependencies updated to secure versions
          - All security scans now pass
          
          ### Verification
          - [x] Security scans pass
          - [x] Import tests successful
          - [ ] Full CI pipeline (will run on PR)
          
          ### Priority
          **This is a security-critical update and should be reviewed and merged promptly.**
          
          ---
          
          🤖 This PR was created automatically by the security update workflow.
        branch: automated/security-updates
        delete-branch: true
        labels: |
          security
          critical
          dependencies
          automated
        reviewers: |
          security-team
        assignees: |
          security-team

  # =============================================================================
  # AUTO-MERGE LOGIC
  # =============================================================================
  auto-merge:
    name: Auto-merge Updates
    runs-on: ubuntu-latest
    needs: [update-python-deps, update-node-deps, security-updates]
    if: always() && (github.event.inputs.auto_merge == 'true' || needs.security-updates.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for CI to complete
      run: |
        echo "Waiting for CI checks to complete before auto-merge..."
        sleep 300  # Wait 5 minutes for CI to start and potentially complete
    
    - name: Auto-merge security updates
      if: github.event_name == 'schedule' || needs.security-updates.result == 'success'
      uses: pascalgn/merge-action@v0.15.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        merge_method: squash
        merge_commit_message: |
          Automated dependency updates
          
          Auto-merged after successful CI pipeline
        merge_filter_author: github-actions[bot]
        merge_labels: "automated,dependencies"
        merge_remove_labels: "automated"
    
    - name: Notify about auto-merge
      if: success()
      run: |
        echo "✅ Dependency updates have been auto-merged successfully" >> $GITHUB_STEP_SUMMARY
        echo "🔄 Next scheduled update: $(date -d 'next monday 6:00' --iso-8601=minutes)" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # CLEANUP AND REPORTING
  # =============================================================================
  cleanup-and-report:
    name: Cleanup and Report
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, update-python-deps, update-node-deps, security-updates, auto-merge]
    if: always()
    
    steps:
    - name: Generate dependency update report
      run: |
        echo "# Dependency Update Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Action Taken |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Python Dependencies | ${{ needs.analyze-dependencies.outputs.python-outdated == 'true' && '🔄 Updated' || '✅ Current' }} | ${{ needs.update-python-deps.result == 'success' && 'PR Created' || 'No action needed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js Dependencies | ${{ needs.analyze-dependencies.outputs.node-outdated == 'true' && '🔄 Updated' || '✅ Current' }} | ${{ needs.update-node-deps.result == 'success' && 'PR Created' || 'No action needed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Updates | ${{ needs.analyze-dependencies.outputs.security-updates == 'true' && '🚨 Required' || '✅ Secure' }} | ${{ needs.security-updates.result == 'success' && 'PR Created' || 'No action needed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Auto-merge | ${{ needs.auto-merge.result == 'success' && '✅ Completed' || '⏸️ Manual' }} | ${{ needs.auto-merge.result == 'success' && 'Updates merged' || 'Manual review required' }} |" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify team if manual intervention needed
      if: failure() || (needs.security-updates.result == 'success' && needs.auto-merge.result != 'success')
      run: |
        echo "⚠️ Manual intervention may be required for dependency updates" >> $GITHUB_STEP_SUMMARY
        echo "Please review any open dependency update PRs" >> $GITHUB_STEP_SUMMARY