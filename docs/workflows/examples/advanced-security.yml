# Advanced Security Scanning Workflow for Agent Mesh
# Comprehensive security pipeline with SBOM generation, vulnerability scanning,
# container security, and compliance checks
#
# MANUAL SETUP REQUIRED:
# 1. Copy this file to .github/workflows/security.yml
# 2. Configure security scanning secrets in repository settings
# 3. Enable required security features (Dependabot, CodeQL, etc.)
# 4. Review and customize scan policies

name: Advanced Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - container
        - code

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: agent-mesh-federated-runtime

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run pip-audit vulnerability scan
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
    
    - name: Run Snyk Python vulnerability scan
      if: env.SNYK_TOKEN != ''
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npm install -g snyk
        snyk auth $SNYK_TOKEN
        snyk test --json > snyk-python-report.json || true
        snyk test --severity-threshold=medium
    
    - name: Upload dependency scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          snyk-python-report.json

  # =============================================================================
  # CODE SECURITY ANALYSIS
  # =============================================================================
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f sarif -o bandit-results.sarif || true
        bandit -r src/ --severity-level medium
    
    - name: Run Semgrep static analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto --sarif --output=semgrep-results.sarif src/ || true
        semgrep --config=auto --error src/
    
    - name: Upload Bandit SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    - name: Upload Semgrep SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-results.sarif
        category: semgrep
    
    - name: Upload code security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-security-scan-results
        path: |
          bandit-report.json
          semgrep-report.json
          bandit-results.sarif
          semgrep-results.sarif

  # =============================================================================
  # ADVANCED CODEQL ANALYSIS
  # =============================================================================
  codeql-analysis:
    name: Advanced CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch' }}
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        config: |
          paths-ignore:
            - '**/*_pb2.py'
            - '**/*_pb2_grpc.py'
            - '**/test_*.py'
            - 'tests/**'
          query-filters:
            - exclude:
                problem.severity: recommendation
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'container' || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: |
        docker build -t security-test-image:latest .
    
    - name: Run Trivy container scan
      run: |
        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        
        # Scan filesystem
        trivy fs --format json --output trivy-fs-report.json .
        trivy fs --format sarif --output trivy-fs-results.sarif .
        
        # Scan container image
        trivy image --format json --output trivy-image-report.json security-test-image:latest
        trivy image --format sarif --output trivy-image-results.sarif security-test-image:latest
        
        # Show critical and high vulnerabilities
        trivy image --severity CRITICAL,HIGH security-test-image:latest
    
    - name: Run Snyk container scan
      if: env.SNYK_TOKEN != ''
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npm install -g snyk
        snyk auth $SNYK_TOKEN
        snyk container test security-test-image:latest --json > snyk-container-report.json || true
        snyk container test security-test-image:latest --severity-threshold=high
    
    - name: Run Docker Bench security test
      run: |
        git clone https://github.com/docker/docker-bench-security.git
        cd docker-bench-security
        sudo sh docker-bench-security.sh -j > ../docker-bench-report.json || true
    
    - name: Upload Trivy SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-fs-results.sarif
        category: trivy-fs
    
    - name: Upload container scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: container-security-scan-results
        path: |
          trivy-fs-report.json
          trivy-image-report.json
          trivy-fs-results.sarif
          trivy-image-results.sarif
          snyk-container-report.json
          docker-bench-report.json

  # =============================================================================
  # SBOM GENERATION
  # =============================================================================
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.scan_type == 'full' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install SBOM tools
      run: |
        # Install Syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install CycloneDX for Python
        pip install cyclonedx-bom
    
    - name: Generate Python SBOM with CycloneDX
      run: |
        pip install -e .
        cyclonedx-py --output-format json --output-file cyclonedx-python-sbom.json
        cyclonedx-py --output-format xml --output-file cyclonedx-python-sbom.xml
    
    - name: Generate comprehensive SBOM with Syft
      run: |
        syft . -o spdx-json=syft-sbom.spdx.json
        syft . -o cyclonedx-json=syft-sbom.cyclonedx.json
        syft . -o table=syft-sbom.txt
    
    - name: Generate container SBOM
      run: |
        docker build -t sbom-test-image:latest .
        syft sbom-test-image:latest -o spdx-json=container-sbom.spdx.json
        syft sbom-test-image:latest -o cyclonedx-json=container-sbom.cyclonedx.json
    
    - name: Upload SBOM files
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          cyclonedx-python-sbom.json
          cyclonedx-python-sbom.xml
          syft-sbom.spdx.json
          syft-sbom.cyclonedx.json
          syft-sbom.txt
          container-sbom.spdx.json
          container-sbom.cyclonedx.json
    
    - name: Upload SBOM to release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./syft-sbom.spdx.json
        asset_name: agent-mesh-sbom.spdx.json
        asset_content_type: application/json

  # =============================================================================
  # COMPLIANCE AND POLICY CHECKS
  # =============================================================================
  compliance-check:
    name: Compliance and Policy Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ inputs.scan_type == 'full' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install compliance tools
      run: |
        pip install --upgrade pip
        pip install reuse licensecheck
        npm install -g license-checker
    
    - name: Check REUSE compliance
      run: |
        reuse lint --json > reuse-compliance.json || true
        reuse lint
    
    - name: Check Python license compliance
      run: |
        licensecheck --json > python-license-check.json || true
        licensecheck --no-deps
    
    - name: Check Node.js license compliance
      if: ${{ hashFiles('package.json') != '' }}
      run: |
        npm install
        license-checker --json > nodejs-license-check.json || true
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC;GPL-3.0'
    
    - name: Check for sensitive files
      run: |
        find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" \) \
          -not -path "./tests/fixtures/*" \
          -not -path "./.git/*" > sensitive-files.txt || true
    
    - name: Validate security policies
      run: |
        # Check if required security files exist
        files=("SECURITY.md" "CODE_OF_CONDUCT.md" ".github/dependabot.yml")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required security file: $file" >> policy-violations.txt
          fi
        done
    
    - name: Upload compliance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: compliance-check-results
        path: |
          reuse-compliance.json
          python-license-check.json
          nodejs-license-check.json
          sensitive-files.txt
          policy-violations.txt

  # =============================================================================
  # SECURITY SUMMARY REPORT
  # =============================================================================
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, codeql-analysis, container-security-scan, generate-sbom, compliance-check]
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | Python dependencies and packages |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Security | ${{ needs.code-security-scan.result }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Advanced code scanning |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security-scan.result }} | Docker image vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        echo "| SBOM Generation | ${{ needs.generate-sbom.result }} | Software Bill of Materials |" >> $GITHUB_STEP_SUMMARY
        echo "| Compliance Check | ${{ needs.compliance-check.result }} | License and policy compliance |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count artifacts and reports
        if [ -d "dependency-scan-results" ]; then
          dep_count=$(find dependency-scan-results -name "*.json" | wc -l)
          echo "📊 **Dependency Reports:** $dep_count generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "sbom-files" ]; then
          sbom_count=$(find sbom-files -name "*.json" -o -name "*.xml" | wc -l)
          echo "📋 **SBOM Files:** $sbom_count generated" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Check for critical security issues
      run: |
        critical_issues=0
        
        # Check if any security scan failed
        if [[ "${{ needs.dependency-scan.result }}" == "failure" || 
              "${{ needs.code-security-scan.result }}" == "failure" || 
              "${{ needs.container-security-scan.result }}" == "failure" ]]; then
          critical_issues=$((critical_issues + 1))
          echo "::error::Critical security scan failures detected"
        fi
        
        # Set output for downstream jobs
        echo "critical_issues=$critical_issues" >> $GITHUB_OUTPUT
    
    - name: Create security issue (if critical)
      if: steps.check-issues.outputs.critical_issues > 0 && github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Critical Security Issues Detected - ${context.sha.substring(0, 7)}`;
          const body = `
          Critical security issues have been detected in the latest commit.
          
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Workflow:** ${context.workflow}
          
          Please review the security scan results and address any critical vulnerabilities immediately.
          
          [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical', 'automated']
          });