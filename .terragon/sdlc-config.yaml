# Terragon SDLC Integration Configuration
# This file defines the complete SDLC configuration for Agent Mesh Federated Runtime

metadata:
  name: agent-mesh-federated-runtime
  version: "1.0.0"
  terragon_sdlc_version: "2.1.0"
  created: "2025-08-02"
  team: "Terragon Labs"
  project_type: "distributed_system"

# Development Environment Configuration
development:
  python_version: "3.11"
  node_version: "18"
  docker_required: true
  kubernetes_required: true
  
  # Development tools and their versions
  tools:
    pytest: ">=7.0.0"
    black: ">=23.0.0"
    flake8: ">=6.0.0"
    mypy: ">=1.0.0"
    bandit: ">=1.7.0"
    safety: ">=2.3.0"
    pre-commit: ">=3.0.0"
    
  # Environment setup commands
  setup_commands:
    - "python -m pip install --upgrade pip"
    - "pip install -e .[dev]"
    - "pre-commit install"
    - "docker-compose up -d --build"

# Quality Gates Configuration
quality_gates:
  # Pre-commit checks
  pre_commit:
    enabled: true
    hooks:
      - black
      - flake8
      - mypy
      - bandit
      - pytest-quick
      - doc-lint
    
  # Pull request checks
  pull_request:
    required_checks:
      - "CI / Code Quality & Linting"
      - "CI / Security Scanning" 
      - "CI / Unit Tests"
      - "CI / Integration Tests"
      - "CI / Build Validation"
      - "CI / Documentation Check"
    
    # Automated quality thresholds
    thresholds:
      test_coverage: 85
      security_grade: "A"
      code_quality_grade: "A"
      performance_regression: 5  # percent
    
  # Release gates
  release:
    required_checks:
      - "Security Scan Clean"
      - "Full Test Suite Pass"
      - "Performance Benchmarks Pass"
      - "Documentation Up to Date"
      - "SBOM Generated"
      - "Vulnerability Scan Clean"

# Testing Strategy
testing:
  # Test execution strategy
  strategy:
    unit_tests:
      directory: "tests/unit"
      coverage_target: 90
      timeout: 300
      parallel: true
      
    integration_tests:
      directory: "tests/integration"
      coverage_target: 75
      timeout: 900
      parallel: false
      requires_services: true
      
    e2e_tests:
      directory: "tests/e2e"
      coverage_target: 60
      timeout: 1800
      parallel: false
      requires_deployment: true
      
    performance_tests:
      directory: "tests/performance"
      baseline_file: ".performance-baseline.json"
      regression_threshold: 10
      
  # Mock and fixture strategy
  fixtures:
    shared_fixtures: "tests/fixtures"
    mock_services: "tests/utils/mock_helpers.py"
    test_data: "tests/data"

# Build and Deployment Configuration
build:
  # Docker build configuration
  docker:
    multi_stage: true
    platforms: ["linux/amd64", "linux/arm64"]
    base_image: "python:3.11-slim"
    optimization: true
    security_scanning: true
    
  # Build optimization
  optimization:
    caching:
      enabled: true
      layers: ["dependencies", "source", "tests"]
      ttl: "7d"
    
    parallel_builds: true
    build_kit: true
    
  # Artifact management
  artifacts:
    python_wheel: true
    docker_image: true
    sbom: true
    security_report: true
    test_reports: true

# Monitoring and Observability
monitoring:
  # Metrics collection
  metrics:
    prometheus:
      enabled: true
      port: 9090
      scrape_interval: "30s"
    
    custom_metrics:
      - name: "agent_mesh_nodes_active"
        type: "gauge"
        description: "Number of active nodes in the mesh"
      
      - name: "consensus_rounds_total"
        type: "counter"
        description: "Total number of consensus rounds"
      
      - name: "federated_learning_accuracy"
        type: "histogram"
        description: "Model accuracy distribution"
  
  # Logging configuration
  logging:
    level: "INFO"
    format: "json"
    structured: true
    aggregation:
      enabled: true
      backend: "fluentd"
      retention: "30d"
  
  # Tracing
  tracing:
    enabled: true
    backend: "jaeger"
    sampling_rate: 0.1
    
  # Alerting
  alerts:
    channels: ["slack", "pagerduty", "email"]
    severity_levels: ["critical", "high", "medium", "low"]
    escalation_policies: true

# Security Configuration
security:
  # Code scanning
  sast:
    enabled: true
    tools: ["bandit", "semgrep", "sonarcloud"]
    severity_threshold: "high"
    
  # Dependency scanning
  dependency_scanning:
    enabled: true
    tools: ["safety", "snyk", "npm-audit"]
    auto_fix: true
    severity_threshold: "medium"
    
  # Container scanning
  container_scanning:
    enabled: true
    tools: ["trivy", "snyk-container"]
    base_image_updates: true
    
  # Secret scanning
  secret_scanning:
    enabled: true
    tools: ["detect-secrets", "gitleaks"]
    prevent_commits: true
    
  # Security policies
  policies:
    signed_commits: true
    branch_protection: true
    required_reviews: 2
    admin_enforcement: true

# Automation Configuration
automation:
  # Dependency management
  dependencies:
    auto_update: true
    schedule: "weekly"
    security_updates: "immediate"
    
  # Issue management
  issues:
    auto_triage: true
    stale_closure: 90  # days
    auto_labeling: true
    
  # Documentation
  documentation:
    auto_update: true
    link_checking: true
    version_sync: true
    
  # Repository maintenance
  maintenance:
    schedule: "daily"
    cleanup_artifacts: true
    performance_monitoring: true

# Integration Points
integrations:
  # CI/CD Platform
  github_actions:
    enabled: true
    workflows_path: ".github/workflows"
    secrets_required:
      - "GITHUB_TOKEN"
      - "PYPI_API_TOKEN"
      - "DOCKER_PASSWORD"
      - "SONAR_TOKEN"
      - "SNYK_TOKEN"
    
  # Package Registries
  registries:
    pypi:
      enabled: true
      automatic_publishing: true
    
    github_packages:
      enabled: true
      container_registry: true
    
    docker_hub:
      enabled: false
      
  # External Services
  external_services:
    sonarcloud:
      project_key: "danieleschmidt_agent-mesh-federated-runtime"
      organization: "danieleschmidt"
      
    snyk:
      organization: "terragon-labs"
      
    sentry:
      project: "agent-mesh-federated-runtime"
      
    grafana:
      org_id: 1
      folder: "agent-mesh"

# Performance Configuration
performance:
  # Benchmarking
  benchmarks:
    enabled: true
    baseline_branch: "main"
    regression_threshold: 10  # percent
    
  # Load testing
  load_testing:
    enabled: true
    scenarios: ["consensus", "network", "federated_learning"]
    target_rps: 1000
    duration: "5m"
    
  # Resource limits
  resources:
    cpu_limit: "4"
    memory_limit: "8Gi"
    storage_limit: "50Gi"

# Team and Process Configuration
team:
  # Code ownership
  code_owners:
    enabled: true
    global_owners: ["@terragon-labs/core-team"]
    path_owners:
      "/src/consensus/": ["@terragon-labs/consensus-team"]
      "/src/networking/": ["@terragon-labs/networking-team"]
      "/src/ml/": ["@terragon-labs/ml-team"]
      "/docs/": ["@terragon-labs/docs-team"]
  
  # Review requirements
  reviews:
    required_reviewers: 2
    dismiss_stale: true
    require_code_owner: true
    
  # Branch strategy
  branching:
    main_branch: "main"
    development_branch: "develop" 
    feature_prefix: "feature/"
    hotfix_prefix: "hotfix/"
    release_prefix: "release/"

# Deployment Configuration
deployment:
  # Environment strategy
  environments:
    - name: "development"
      auto_deploy: true
      branch: "develop"
      
    - name: "staging"
      auto_deploy: true
      branch: "main"
      approval_required: false
      
    - name: "production"
      auto_deploy: false
      branch: "main"
      approval_required: true
      approvers: ["@terragon-labs/senior-team"]
  
  # Deployment strategy
  strategy:
    type: "blue_green"
    canary_percentage: 10
    rollback_on_failure: true
    health_check_timeout: "10m"
    
  # Infrastructure
  infrastructure:
    kubernetes: true
    helm: true
    terraform: false
    cloud_provider: "aws"  # or gcp, azure

# Compliance and Governance
compliance:
  # Standards compliance
  standards:
    - "ISO 27001"
    - "SOX"
    - "GDPR"
    
  # Data governance
  data_governance:
    data_classification: true
    retention_policies: true
    access_controls: true
    
  # Audit requirements
  audit:
    code_reviews: true
    deployment_approvals: true
    security_scans: true
    change_tracking: true

# Troubleshooting and Support
support:
  # Documentation
  documentation:
    runbooks: "docs/runbooks/"
    troubleshooting: "docs/troubleshooting/"
    architecture: "docs/architecture/"
    
  # Monitoring dashboards
  dashboards:
    - name: "System Overview"
      url: "https://grafana.agent-mesh.com/d/system-overview"
      
    - name: "Application Performance"
      url: "https://grafana.agent-mesh.com/d/app-performance"
      
    - name: "Security Monitoring"
      url: "https://grafana.agent-mesh.com/d/security"
  
  # Alert contacts
  contacts:
    on_call: "oncall@terragon-labs.com"
    security: "security@terragon-labs.com"
    infrastructure: "infra@terragon-labs.com"