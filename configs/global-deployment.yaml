# Global Deployment Configuration for Agent Mesh Federated Runtime
# Production-ready multi-region deployment configuration

apiVersion: v1
kind: ConfigMap
metadata:
  name: global-deployment-config
  namespace: agent-mesh
  labels:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: config
    deployment.type: global
data:
  # Global Configuration
  global.yaml: |
    # Multi-region deployment configuration
    global:
      deployment_strategy: "blue-green"
      regions:
        primary: "us-west-2"
        secondary: ["us-east-1", "eu-west-1", "ap-southeast-1"]
      
      # Global load balancing
      load_balancing:
        strategy: "geographic"
        health_check_interval: 30
        failover_threshold: 3
        
      # Cross-region communication
      inter_region:
        encryption: true
        compression: true
        protocol: "grpc"
        
      # Global monitoring
      monitoring:
        enabled: true
        metrics_aggregation: true
        distributed_tracing: true
        log_aggregation: true
        
    # Security configuration
    security:
      tls:
        enabled: true
        min_version: "1.3"
        cipher_suites:
          - "TLS_AES_256_GCM_SHA384"
          - "TLS_CHACHA20_POLY1305_SHA256"
          
      authentication:
        method: "mtls"
        cert_rotation_interval: "24h"
        
      authorization:
        rbac_enabled: true
        policy_engine: "opa"
        
      network_policies:
        deny_all_ingress: false
        allow_same_namespace: true
        allow_cross_region: true
        
    # Resource limits
    resources:
      limits:
        cpu: "2000m"
        memory: "4Gi"
        storage: "20Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
        storage: "10Gi"
        
    # Scaling configuration
    scaling:
      horizontal:
        enabled: true
        min_replicas: 3
        max_replicas: 100
        target_cpu: 70
        target_memory: 80
        
      vertical:
        enabled: true
        update_mode: "Auto"
        
    # Data persistence
    persistence:
      type: "distributed"
      replication_factor: 3
      backup:
        enabled: true
        schedule: "0 2 * * *"
        retention: "30d"
        
  # Production environment specific
  production.yaml: |
    environment: production
    
    # High availability
    availability:
      multi_zone: true
      anti_affinity: true
      pod_disruption_budget:
        min_available: "50%"
        
    # Performance tuning
    performance:
      gc_tuning: true
      connection_pooling: true
      request_batching: true
      cache_optimization: true
      
    # Monitoring and alerting
    monitoring:
      prometheus:
        scrape_interval: "15s"
        retention: "30d"
      grafana:
        admin_user: "admin"
        persistence_enabled: true
      alerting:
        enabled: true
        webhook_urls:
          - "https://hooks.slack.com/services/your/webhook/url"
        rules:
          - alert: "HighCPUUsage"
            expr: "cpu_usage > 80"
            duration: "5m"
          - alert: "HighMemoryUsage"
            expr: "memory_usage > 85"
            duration: "10m"
          - alert: "PodCrashLooping"
            expr: "increase(kube_pod_container_status_restarts_total[1h]) > 5"
            
    # Networking
    networking:
      service_mesh:
        enabled: true
        provider: "istio"
      ingress:
        enabled: true
        class: "nginx"
        tls_enabled: true
        
    # Disaster recovery
    disaster_recovery:
      backup_regions: ["us-east-1", "eu-west-1"]
      rto: "1h"  # Recovery Time Objective
      rpo: "15m"  # Recovery Point Objective
      
  # Staging environment
  staging.yaml: |
    environment: staging
    
    # Reduced resource allocation
    resources:
      limits:
        cpu: "1000m"
        memory: "2Gi"
        storage: "10Gi"
      requests:
        cpu: "250m"
        memory: "512Mi"
        storage: "5Gi"
        
    # Basic monitoring
    monitoring:
      prometheus:
        scrape_interval: "30s"
        retention: "7d"
      alerting:
        enabled: false
        
    # Single region deployment
    global:
      regions:
        primary: "us-west-2"
        secondary: []
        
  # Edge deployment
  edge.yaml: |
    environment: edge
    
    # Minimal resources for edge devices
    resources:
      limits:
        cpu: "500m"
        memory: "1Gi"
        storage: "5Gi"
      requests:
        cpu: "100m"
        memory: "256Mi"
        storage: "2Gi"
        
    # Edge-specific optimizations
    optimizations:
      lightweight_mode: true
      cache_aggressive: true
      compression_enabled: true
      minimal_logging: true
      
    # Local-first operation
    operation_mode: "local_first"
    sync_interval: "1h"
    offline_capability: true
    
---
apiVersion: v1
kind: Service
metadata:
  name: agent-mesh-global
  namespace: agent-mesh
  labels:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: service
    deployment.type: global
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    external-dns.alpha.kubernetes.io/hostname: "mesh.yourdomain.com"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: mesh-node
  ports:
  - name: p2p
    port: 4001
    targetPort: 4001
    protocol: TCP
  - name: grpc
    port: 5001
    targetPort: 5001
    protocol: TCP
  - name: http-api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
    
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agent-mesh-ingress
  namespace: agent-mesh
  labels:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - mesh.yourdomain.com
    - api.mesh.yourdomain.com
    secretName: agent-mesh-tls
  rules:
  - host: mesh.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agent-mesh-global
            port:
              number: 8000
  - host: api.mesh.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agent-mesh-global
            port:
              number: 8000
              
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: agent-mesh-pdb
  namespace: agent-mesh
  labels:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: agent-mesh
      app.kubernetes.io/component: mesh-node
      
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-mesh-hpa
  namespace: agent-mesh
  labels:
    app.kubernetes.io/name: agent-mesh
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: agent-mesh
  minReplicas: 3
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60