name: 🚀 Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # ============================================================================
  # VALIDATE RELEASE
  # ============================================================================
  
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
            IS_PRERELEASE=$(echo "$VERSION" | grep -E "(alpha|beta|rc)" && echo "true" || echo "false")
          else
            echo "❌ Invalid release trigger"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "🏷️ Release version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: ✅ Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

  # ============================================================================
  # RUN FULL TEST SUITE
  # ============================================================================
  
  test-suite:
    name: 🧪 Full Test Suite
    needs: validate-release
    uses: ./.github/workflows/ci.yml
    
  # ============================================================================
  # BUILD RELEASE ARTIFACTS
  # ============================================================================
  
  build-artifacts:
    name: 🏗️ Build Release Artifacts
    needs: [validate-release, test-suite]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: 🔄 Update version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json

      - name: 🏗️ Build Python package
        run: |
          python -m build
          
      - name: ✅ Verify package
        run: |
          python -m twine check dist/*
          pip install dist/*.whl
          python -c "import agent_mesh; print(f'Package version: {agent_mesh.__version__}')"

      - name: 📊 Upload Python artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}

  # ============================================================================
  # BUILD DOCUMENTATION
  # ============================================================================
  
  build-documentation:
    name: 📚 Build Documentation
    needs: [validate-release, test-suite]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: 🏗️ Build documentation
        run: |
          sphinx-build -b html docs/ docs/_build/html/
          
      - name: 📦 Package documentation
        run: |
          cd docs/_build/html/
          tar -czf ../../../documentation.tar.gz .

      - name: 📊 Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: documentation.tar.gz

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  
  security-scan:
    name: 🔒 Security Scan
    needs: [validate-release, build-artifacts]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: 🔍 Scan Python package
        run: |
          pip install bandit safety
          bandit -r src/ -f json -o bandit-release-report.json
          safety check --json --output safety-release-report.json
        continue-on-error: true

      - name: 🐳 Scan Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --format json --output trivy-release-report.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-release-report.json
            safety-release-report.json
            trivy-release-report.json

  # ============================================================================
  # PUBLISH RELEASE
  # ============================================================================
  
  publish-release:
    name: 📦 Publish Release
    needs: [validate-release, test-suite, build-artifacts, build-documentation, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    environment:
      name: release
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v$VERSION" | head -n1)
          
          echo "## 🚀 What's New in v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "### 📋 Changes since $PREVIOUS_TAG" >> release_notes.md
            git log --pretty=format:"- %s" "$PREVIOUS_TAG"..HEAD >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "### 📦 Artifacts" >> release_notes.md
          echo "- **Python Package**: Available on PyPI" >> release_notes.md
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION\`" >> release_notes.md
          echo "- **Documentation**: See attached documentation.tar.gz" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔒 Security" >> release_notes.md
          echo "This release has been scanned for security vulnerabilities." >> release_notes.md
          echo "Security reports are available in the workflow artifacts." >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 📊 Metrics" >> release_notes.md
          echo "- **Build Time**: ${{ github.run_number }} minutes" >> release_notes.md
          echo "- **Docker Image Size**: $(docker images --format 'table {{.Size}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION | tail -n1)" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "---" >> release_notes.md
          echo "🤖 Generated with [Claude Code](https://claude.ai/code)" >> release_notes.md

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: "Release v${{ needs.validate-release.outputs.version }}"
          body_path: release_notes.md
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
          draft: false
          files: |
            python-package/dist/*
            documentation.tar.gz
          generate_release_notes: true

      - name: 🐍 Publish to PyPI
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          pip install twine
          python -m twine upload python-package/dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: 🐍 Publish to Test PyPI
        if: needs.validate-release.outputs.is-prerelease == 'true'
        run: |
          pip install twine
          python -m twine upload --repository testpypi python-package/dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

  # ============================================================================
  # POST-RELEASE TASKS
  # ============================================================================
  
  post-release:
    name: 📋 Post-Release Tasks
    needs: [validate-release, publish-release]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Update version in develop branch
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          NEXT_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."($3+1)"-dev"}')
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git checkout develop || git checkout -b develop
          
          sed -i "s/version = \".*\"/version = \"$NEXT_VERSION\"/" pyproject.toml
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEXT_VERSION\"/" package.json
          
          git add pyproject.toml package.json
          git commit -m "chore: bump version to $NEXT_VERSION [skip ci]"
          git push origin develop

      - name: 📊 Create release metrics
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          mkdir -p .github/metrics
          cat > .github/metrics/release-v$VERSION.json << EOF
          {
            "version": "$VERSION",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "is_prerelease": ${{ needs.validate-release.outputs.is-prerelease }},
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "artifacts": {
              "python_package": true,
              "docker_image": true,
              "documentation": true
            }
          }
          EOF
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/metrics/release-v$VERSION.json
          git commit -m "docs: add release metrics for v$VERSION [skip ci]"
          git push

      - name: 🎉 Announce release
        run: |
          echo "## 🎉 Release v${{ needs.validate-release.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release has been successfully published with the following artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Python package on PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker image on GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documentation archive" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release with full changelog" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY