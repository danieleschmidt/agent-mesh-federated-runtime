name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============================================================================
  # DEPENDENCY SCANNING
  # ============================================================================
  
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pipenv pip-audit

      - name: 🔍 Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: 🔍 Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: 📊 Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  # ============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # ============================================================================
  
  sast-scan:
    name: 🔍 Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install SAST tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep

      - name: 🔒 Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: 🔍 Run Semgrep scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/
        continue-on-error: true

      - name: 📊 Upload SAST results
        uses: actions/upload-artifact@v3
        with:
          name: sast-scan-results
          path: |
            bandit-report.json
            semgrep-report.json

  # ============================================================================
  # CODEQL ANALYSIS
  # ============================================================================
  
  codeql-analysis:
    name: 🔬 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # ============================================================================
  # SECRET SCANNING
  # ============================================================================
  
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

  # ============================================================================
  # CONTAINER SECURITY SCANNING
  # ============================================================================
  
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request' # Skip on PRs to avoid resource usage
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker image
        run: |
          docker build -t agent-mesh:security-scan .

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'agent-mesh:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: agent-mesh:security-scan
          args: --severity-threshold=high
        continue-on-error: true

  # ============================================================================
  # INFRASTRUCTURE SECURITY
  # ============================================================================
  
  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
        continue-on-error: true

      - name: 📊 Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'checkov-results.sarif'

      - name: 🔍 Scan Kubernetes manifests
        if: github.event_name != 'pull_request'
        run: |
          if [ -d "k8s/" ]; then
            docker run --rm -v $(pwd):/src aquasec/kube-bench:latest \
              --config-dir /src/k8s --output json > kube-bench-report.json
          fi
        continue-on-error: true

      - name: 📊 Upload infrastructure scan results
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-scan-results
          path: |
            checkov-results.sarif
            kube-bench-report.json

  # ============================================================================
  # LICENSE COMPLIANCE SCAN
  # ============================================================================
  
  license-scan:
    name: 📄 License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install license scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: 🔍 Scan Python dependencies
        run: |
          pip install -e .
          pip-licenses --format=json --output-file=python-licenses.json
          licensecheck --format json > licensecheck-report.json
        continue-on-error: true

      - name: 🔍 Scan Node.js dependencies (if applicable)
        run: |
          if [ -f "package.json" ]; then
            npm install
            npx license-checker --json --out node-licenses.json
          fi
        continue-on-error: true

      - name: 📊 Upload license scan results
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: |
            python-licenses.json
            licensecheck-report.json
            node-licenses.json

  # ============================================================================
  # SECURITY SCORECARD
  # ============================================================================
  
  security-scorecard:
    name: 📊 OpenSSF Security Scorecard
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name != 'pull_request'
    
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 📊 Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          publish_results: true

      - name: 📊 Upload Scorecard results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scorecard-results.sarif

  # ============================================================================
  # SECURITY REPORT AGGREGATION
  # ============================================================================
  
  security-report:
    name: 📋 Security Report
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, infrastructure-scan, license-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all security artifacts
        uses: actions/download-artifact@v3

      - name: 📊 Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date -u)" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Scan Type | Status | Details |" >> security-summary.md
          echo "|-----------|--------|---------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Check for vulnerable dependencies |" >> security-summary.md
          echo "| SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Static application security testing |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Scan for exposed secrets |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Container vulnerability scanning |" >> security-summary.md
          echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Infrastructure security analysis |" >> security-summary.md
          echo "| License Scan | ${{ needs.license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | License compliance checking |" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 🎯 Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. **Review Security Reports**: Check individual scan reports for detailed findings" >> security-summary.md
          echo "2. **Update Dependencies**: Keep all dependencies up to date" >> security-summary.md
          echo "3. **Monitor Continuously**: Set up automated security monitoring" >> security-summary.md
          echo "4. **Follow Best Practices**: Implement secure coding practices" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "---" >> security-summary.md
          echo "🤖 Generated with [Claude Code](https://claude.ai/code)" >> security-summary.md

      - name: 📊 Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: 📋 Add to job summary
        run: |
          cat security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Create issue for security findings
        if: github.event_name == 'schedule' && (needs.dependency-scan.result == 'failure' || needs.sast-scan.result == 'failure' || needs.secret-scan.result == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Security Scan Findings - ' + new Date().toISOString().split('T')[0];
            const body = `## 🔒 Automated Security Scan Report
            
            Our scheduled security scans have detected some issues that require attention:
            
            - **Dependency Scan**: ${{ needs.dependency-scan.result }}
            - **SAST Scan**: ${{ needs.sast-scan.result }}  
            - **Secret Scan**: ${{ needs.secret-scan.result }}
            - **Container Scan**: ${{ needs.container-scan.result }}
            - **Infrastructure Scan**: ${{ needs.infrastructure-scan.result }}
            
            Please review the detailed scan reports in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) and address any critical or high-severity findings.
            
            🤖 This issue was automatically created by the security scanning workflow.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated', 'high-priority']
            });