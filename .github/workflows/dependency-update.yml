name: 🔄 Dependency Updates

on:
  schedule:
    # Run dependency updates weekly on Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - 'security'
          - 'minor'
          - 'all'
        default: 'security'

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

permissions:
  contents: write
  pull-requests: write
  security-events: read

jobs:
  # ============================================================================
  # SCAN FOR OUTDATED DEPENDENCIES
  # ============================================================================
  
  scan-dependencies:
    name: 🔍 Scan Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      python-updates: ${{ steps.python-scan.outputs.updates }}
      node-updates: ${{ steps.node-scan.outputs.updates }}
      security-updates: ${{ steps.security-scan.outputs.updates }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety pipenv-to-requirements

      - name: 🔍 Scan Python dependencies
        id: python-scan
        run: |
          pip install -e .
          pip list --outdated --format=json > python-outdated.json
          echo "updates=$(wc -l < python-outdated.json)" >> $GITHUB_OUTPUT

      - name: 🔒 Scan for security vulnerabilities
        id: security-scan
        run: |
          safety check --json --output safety-scan.json || true
          pip-audit --format=json --output=pip-audit-scan.json || true
          
          # Count security issues
          SAFETY_COUNT=$(jq '.vulnerabilities | length' safety-scan.json 2>/dev/null || echo 0)
          AUDIT_COUNT=$(jq '.vulnerabilities | length' pip-audit-scan.json 2>/dev/null || echo 0)
          TOTAL=$((SAFETY_COUNT + AUDIT_COUNT))
          echo "updates=$TOTAL" >> $GITHUB_OUTPUT

      - name: 🟢 Setup Node.js
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Scan Node.js dependencies
        id: node-scan
        if: hashFiles('package.json') != ''
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm outdated --json > npm-outdated.json || true
          
          # Count updates
          OUTDATED_COUNT=$(jq 'keys | length' npm-outdated.json 2>/dev/null || echo 0)
          echo "updates=$OUTDATED_COUNT" >> $GITHUB_OUTPUT

      - name: 📊 Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            python-outdated.json
            safety-scan.json
            pip-audit-scan.json
            npm-audit.json
            npm-outdated.json

  # ============================================================================
  # UPDATE PYTHON DEPENDENCIES
  # ============================================================================
  
  update-python-deps:
    name: 🐍 Update Python Dependencies
    needs: scan-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.scan-dependencies.outputs.python-updates > 0 || needs.scan-dependencies.outputs.security-updates > 0
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install update tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety pip-audit

      - name: 🔒 Update security vulnerabilities first
        run: |
          # Get security vulnerabilities
          pip-audit --format=json --output=security-issues.json || true
          
          # Extract vulnerable packages and update them
          if [ -s security-issues.json ]; then
            jq -r '.vulnerabilities[].package' security-issues.json | sort -u > vulnerable-packages.txt
            
            while IFS= read -r package; do
              echo "🔒 Updating vulnerable package: $package"
              pip install --upgrade "$package"
            done < vulnerable-packages.txt
          fi

      - name: 🔄 Update dependencies based on input
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
          
          case $UPDATE_TYPE in
            "security")
              echo "🔒 Only security updates were applied above"
              ;;
            "minor")
              echo "📦 Updating minor versions..."
              pip list --outdated --format=json | jq -r '.[] | select(.latest_version | split(".") | .[1] | tonumber > (.current_version | split(".") | .[1] | tonumber)) | .name' | while read package; do
                pip install --upgrade "$package"
              done
              ;;
            "all")
              echo "🚀 Updating all dependencies..."
              pip list --outdated --format=json | jq -r '.[].name' | while read package; do
                pip install --upgrade "$package"
              done
              ;;
          esac

      - name: 📋 Freeze updated requirements
        run: |
          pip freeze > requirements-updated.txt
          
          # Generate diff
          if [ -f requirements.txt ]; then
            diff requirements.txt requirements-updated.txt > requirements.diff || true
          fi

      - name: 🧪 Test updated dependencies
        run: |
          # Run basic import tests
          python -c "import pkg_resources; pkg_resources.require(open('requirements.txt').read().splitlines())" || true
          
          # Run unit tests if they exist
          if [ -d "tests/unit" ]; then
            pytest tests/unit/ -x --tb=short || echo "Some tests failed with updated dependencies"
          fi

      - name: 📊 Generate update report
        run: |
          echo "# 🐍 Python Dependency Update Report" > python-update-report.md
          echo "" >> python-update-report.md
          echo "Update Type: ${{ github.event.inputs.update_type || 'security' }}" >> python-update-report.md
          echo "Date: $(date -u)" >> python-update-report.md
          echo "" >> python-update-report.md
          
          if [ -f requirements.diff ]; then
            echo "## 📋 Changes" >> python-update-report.md
            echo '```diff' >> python-update-report.md
            cat requirements.diff >> python-update-report.md
            echo '```' >> python-update-report.md
          fi
          
          echo "" >> python-update-report.md
          echo "## 🔒 Security Issues Addressed" >> python-update-report.md
          if [ -s security-issues.json ]; then
            jq -r '.vulnerabilities[] | "- **\(.package)**: \(.advisory_title)"' security-issues.json >> python-update-report.md
          else
            echo "No security vulnerabilities found." >> python-update-report.md
          fi

      - name: 📊 Upload Python update artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-update-results
          path: |
            requirements-updated.txt
            requirements.diff
            python-update-report.md
            security-issues.json

  # ============================================================================
  # UPDATE NODE.JS DEPENDENCIES
  # ============================================================================
  
  update-node-deps:
    name: 🟢 Update Node.js Dependencies
    needs: scan-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: hashFiles('package.json') != '' && needs.scan-dependencies.outputs.node-updates > 0
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: 🔒 Fix security vulnerabilities
        run: |
          npm audit fix --audit-level=moderate || true

      - name: 🔄 Update dependencies based on input
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
          
          case $UPDATE_TYPE in
            "security")
              echo "🔒 Security fixes were applied above"
              ;;
            "minor")
              echo "📦 Updating minor versions..."
              ncu -u --target minor
              npm install
              ;;
            "all")
              echo "🚀 Updating all dependencies..."
              ncu -u
              npm install
              ;;
          esac

      - name: 🧪 Test updated dependencies
        run: |
          npm test || echo "Some tests failed with updated dependencies"

      - name: 📊 Generate Node.js update report
        run: |
          echo "# 🟢 Node.js Dependency Update Report" > node-update-report.md
          echo "" >> node-update-report.md
          echo "Update Type: ${{ github.event.inputs.update_type || 'security' }}" >> node-update-report.md
          echo "Date: $(date -u)" >> node-update-report.md
          echo "" >> node-update-report.md
          
          echo "## 📋 Package Changes" >> node-update-report.md
          git diff package.json >> node-update-report.md || true
          
          echo "" >> node-update-report.md
          echo "## 🔒 Security Audit" >> node-update-report.md
          npm audit --audit-level=low || true >> node-update-report.md

      - name: 📊 Upload Node.js update artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node-update-results
          path: |
            package.json
            package-lock.json
            node-update-report.md

  # ============================================================================
  # CREATE PULL REQUEST
  # ============================================================================
  
  create-update-pr:
    name: 📨 Create Update PR
    needs: [scan-dependencies, update-python-deps, update-node-deps]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always() && (needs.update-python-deps.result == 'success' || needs.update-node-deps.result == 'success')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download update artifacts
        uses: actions/download-artifact@v3

      - name: 🔄 Apply Python updates
        if: needs.update-python-deps.result == 'success'
        run: |
          if [ -f python-update-results/requirements-updated.txt ]; then
            cp python-update-results/requirements-updated.txt requirements.txt
          fi

      - name: 🔄 Apply Node.js updates
        if: needs.update-node-deps.result == 'success'
        run: |
          if [ -f node-update-results/package.json ]; then
            cp node-update-results/package.json .
            cp node-update-results/package-lock.json .
          fi

      - name: 📝 Create comprehensive PR description
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
          
          echo "# 🔄 Automated Dependency Updates" > pr-description.md
          echo "" >> pr-description.md
          echo "This PR contains automated dependency updates." >> pr-description.md
          echo "" >> pr-description.md
          echo "**Update Type**: $UPDATE_TYPE" >> pr-description.md
          echo "**Generated**: $(date -u)" >> pr-description.md
          echo "**Security Updates**: ${{ needs.scan-dependencies.outputs.security-updates }}" >> pr-description.md
          echo "" >> pr-description.md
          
          if [ -f python-update-results/python-update-report.md ]; then
            cat python-update-results/python-update-report.md >> pr-description.md
            echo "" >> pr-description.md
          fi
          
          if [ -f node-update-results/node-update-report.md ]; then
            cat node-update-results/node-update-report.md >> pr-description.md
            echo "" >> pr-description.md
          fi
          
          echo "## ✅ Checklist" >> pr-description.md
          echo "- [x] Dependencies scanned for vulnerabilities" >> pr-description.md
          echo "- [x] Updates applied according to policy" >> pr-description.md
          echo "- [x] Basic tests passed" >> pr-description.md
          echo "- [ ] Manual review completed" >> pr-description.md
          echo "- [ ] Additional testing completed" >> pr-description.md
          echo "" >> pr-description.md
          echo "---" >> pr-description.md
          echo "🤖 This PR was automatically created by the dependency update workflow." >> pr-description.md

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📨 Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
          BRANCH_NAME="automated-deps-update-$(date +%Y%m%d-%H%M%S)"
          
          # Create and switch to new branch
          git checkout -b $BRANCH_NAME
          
          # Add changes
          git add .
          
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "chore: update dependencies ($UPDATE_TYPE)

          - Updated Python dependencies
          - Updated Node.js dependencies  
          - Addressed ${{ needs.scan-dependencies.outputs.security-updates }} security issues
          
          🤖 Generated with [Claude Code](https://claude.ai/code)"
          
          # Push branch
          git push origin $BRANCH_NAME
          
          # Create PR
          gh pr create \
            --title "🔄 Automated Dependency Updates ($UPDATE_TYPE)" \
            --body-file pr-description.md \
            --label "dependencies,automated" \
            --reviewer "${{ github.actor }}" \
            --assignee "${{ github.actor }}"

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  
  notify-completion:
    name: 📬 Notify Completion
    needs: [scan-dependencies, update-python-deps, update-node-deps, create-update-pr]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "## 🔄 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Updates Available**: ${{ needs.scan-dependencies.outputs.python-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Updates Available**: ${{ needs.scan-dependencies.outputs.node-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Issues Found**: ${{ needs.scan-dependencies.outputs.security-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Update Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Updates**: ${{ needs.update-python-deps.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Updates**: ${{ needs.update-node-deps.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Creation**: ${{ needs.create-update-pr.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-update-pr.result }}" == "success" ]]; then
            echo "✅ **Pull request created successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "Please review and merge the PR to apply the dependency updates." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.scan-dependencies.outputs.security-updates }}" -gt 0 ]]; then
            echo "🚨 **Security vulnerabilities detected!**" >> $GITHUB_STEP_SUMMARY
            echo "Please review the scan results and apply security updates manually." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No updates were necessary at this time." >> $GITHUB_STEP_SUMMARY
          fi