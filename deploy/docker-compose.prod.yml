version: '3.8'

services:
  # Agent Mesh Bootstrap Node
  mesh-bootstrap:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: agent-mesh-bootstrap
    environment:
      - NODE_ROLE=bootstrap
      - LISTEN_PORT=4001
      - BOOTSTRAP_PEERS=""
      - REGION=us-east-1
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://mesh_user:mesh_pass@postgres:5432/agent_mesh
      - PROMETHEUS_PORT=9090
      - HEALTH_CHECK_PORT=8080
    ports:
      - "4001:4001"  # P2P
      - "9090:9090"  # Metrics
      - "8080:8080"  # Health
    depends_on:
      - postgres
      - prometheus
    networks:
      - mesh-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Agent Mesh Worker Nodes
  mesh-worker-1:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: agent-mesh-worker-1
    environment:
      - NODE_ROLE=worker
      - LISTEN_PORT=4002
      - BOOTSTRAP_PEERS=mesh-bootstrap:4001
      - REGION=us-east-1
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://mesh_user:mesh_pass@postgres:5432/agent_mesh
      - PROMETHEUS_PORT=9091
    ports:
      - "4002:4002"
      - "9091:9091"
    depends_on:
      - mesh-bootstrap
      - postgres
    networks:
      - mesh-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  mesh-worker-2:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: agent-mesh-worker-2
    environment:
      - NODE_ROLE=worker
      - LISTEN_PORT=4003
      - BOOTSTRAP_PEERS=mesh-bootstrap:4001
      - REGION=us-west-2
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://mesh_user:mesh_pass@postgres:5432/agent_mesh
      - PROMETHEUS_PORT=9092
    ports:
      - "4003:4003"
      - "9092:9092"
    depends_on:
      - mesh-bootstrap
      - postgres
    networks:
      - mesh-network
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: agent-mesh-postgres
    environment:
      - POSTGRES_DB=agent_mesh
      - POSTGRES_USER=mesh_user
      - POSTGRES_PASSWORD=mesh_pass
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mesh-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: agent-mesh-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mesh-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-mesh-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9100:9090"
    networks:
      - mesh-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agent-mesh-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../configs/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - mesh-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: agent-mesh-nginx
    volumes:
      - ../deploy/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - mesh-bootstrap
      - mesh-worker-1
      - mesh-worker-2
    networks:
      - mesh-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16