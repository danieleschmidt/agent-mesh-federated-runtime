# Tox configuration for Agent Mesh Federated Runtime
# See https://tox.readthedocs.io/

[tox]
envlist = 
    py{39,310,311,312}
    lint
    security
    docs
    coverage
minversion = 4.0.0
skip_missing_interpreters = true

[testenv]
deps = 
    -r{toxinidir}/requirements-dev.txt
    pytest>=7.1.0
    pytest-asyncio>=0.20.0
    pytest-cov>=4.0.0
    pytest-benchmark>=4.0.0
    pytest-mock>=3.8.0
    pytest-xdist>=2.5.0
commands = 
    pytest {posargs:tests/unit tests/integration} -v --cov=src --cov-report=xml --cov-report=html --junitxml=test-results-{envname}.xml
setenv =
    PYTHONPATH = {toxinidir}/src
    PYTHONDONTWRITEBYTECODE = 1
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv = 
    CI
    GITHUB_*
    DOCKER_*

[testenv:lint]
deps =
    black>=22.0.0
    isort>=5.10.0
    flake8>=5.0.0
    mypy>=1.0.0
    bandit>=1.7.0
    safety>=2.0.0
    yamllint>=1.28.0
    markdownlint-cli>=0.31.0
commands =
    black --check src tests
    isort --check-only src tests
    flake8 src tests
    mypy src
    bandit -r src -f json -o bandit-report.json
    safety check --json --output safety-report.json
    yamllint .
    markdownlint docs/ *.md

[testenv:security]
deps =
    bandit[toml]>=1.7.0
    safety>=2.0.0
    semgrep>=1.0.0
    detect-secrets>=1.4.0
commands =
    bandit -r src -f json -o security/bandit-report.json
    safety check --json --output security/safety-report.json
    semgrep --config=auto src/ --json --output=security/semgrep-report.json
    detect-secrets scan --baseline .secrets.baseline

[testenv:docs]
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.0.0
    sphinx-autodoc-typehints>=1.19.0
    myst-parser>=0.18.0
changedir = docs
commands =
    sphinx-build -W -b html . _build/html

[testenv:coverage]
deps =
    coverage[toml]>=6.5.0
depends = py{39,310,311,312}
commands =
    coverage combine {toxworkdir}
    coverage report --show-missing --fail-under=80
    coverage html
    coverage xml

[testenv:e2e]
deps = 
    {[testenv]deps}
    docker>=6.0.0
    docker-compose>=1.29.0
commands =
    docker-compose -f tests/docker-compose.yml up -d
    pytest tests/e2e/ -v --tb=short
    docker-compose -f tests/docker-compose.yml down

[testenv:performance]  
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    locust>=2.0.0
commands =
    pytest tests/performance/ -v --benchmark-only --benchmark-json=performance-results.json

[testenv:mutation]
deps =
    mutmut>=2.4.0
    {[testenv]deps}
commands =
    mutmut run --paths-to-mutate=src/

[testenv:build]
deps =
    build>=0.8.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*

[testenv:clean]
deps = coverage
skip_install = true
commands = 
    coverage erase
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"

[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    dist,
    build,
    proto/*_pb2.py,
    proto/*_pb2_grpc.py
per-file-ignores =
    __init__.py:F401
    tests/*:S101

[coverage:run]
source = src/agent_mesh
omit = 
    */tests/*
    */test_*.py
    */*_test.py
    */conftest.py
    */proto/*_pb2.py
    */proto/*_pb2_grpc.py
branch = true
parallel = true

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
show_missing = true
precision = 2
fail_under = 80